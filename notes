%All of this information if either quoted or rephrased in a way that I understand from the book or it's examples
%The goal of this files is to give me a quick reference to many different topics in erlang
%Not all of the chapters have folders in this repo because not every chapter
%in the book corresponds with something that has examples. Some chapters are
%mostly theory

Processes and message passing
Module, function, List of arguments - for spawn function spawn(Module, function, args)
From, Message - Client gets the pid the message is from, list_dir is the message - when receiving messages from other processes
Pid ! Msg - Send message to the Pid - self() argument identifies the process sending the message
-Creating and destroying processes is very fast
-Sending messages between processes is very fast
-Processes behave the same way on all operating systems
-We can have very large numbers of processes
-Processes share no memory and are completely independent
-The only way for processes to interact is through message passing
! is called the send operator
Can do Pid1 ! Pid2 ! ... ! Msg to send Msg to all of the pids listed
If you are writing a program that uses a large number of procesess it is a
good idea to find out how many processes can fit into physical memory before
the system starts swapping memory to tisk and make sure that your program will
run in physical memory
    Start the erlang emulator to exceed the system limit of erlang processes
    erl -P number ex. erl -P 300000
    The actual value chosen is the next highest power of two that is greater
    than the supplied argument
Receive with a timeout
receive
    Pattern1 [when Guard1] ->
    Expressions1;
    Pattern2 [when Guard2] ->
    Expressions2;
    ...
after Time ->
    Expressions
end
after 0 causes the timeout to occur immediately
after infinity makes the timeout never trigger
Register processes so that other processes can find out about it

Lists
lists:map(F,L) - function that returns a list made by applying the fun F to every element of list L
lists:filter(P, L) - function that returns a new list of all that elements E in L such that P(E) is true
List comprehension - [F(X) || X <- L]  ex. [2*X || X<- L]. %Double each element of the list
List subtraction operator - X -- Y, Subtracts elements in Y from X
List append operator - X ++ Y, Appends two lists together

Guards
Guards are used in function headers by using the when keyword
    ex. max(X,Y) when X > Y -> X;
        max(X,Y) -> Y.
A guard is a series of guard expressions seperated by commas, GuardExp1,GuardExp2,GuardExp3...
    True if all the guard expressions evaluate to true
Guard sequences are single guards or a series of guards seperated by semicolons G1;G2;G3...
    True if at least one of the guards evaluates to true
Guards can't call user defined functions
The true (atom) guard can be used as a catchall at the end of an if expression
    if
        Guard -> Expressions;
        Guard -> Expressions;
        Guard -> Expressions;
        ...
        true -> Expressions
    end

Case
ex.
case Expression of
    Pattern1 [when Guard1] -> Expression_sequence1;
    Pattern2 [when Guard2] -> Expression_sequence1;
    ...
end

if
ex.
if
    Guard1 ->
        Expression_sequence1;
    Guard2 ->
        Expression_sequence2;
    ...
end
Can use the true atom as a catchall as the last guard otherwise an exception will be thrown if no Guard is matched
    If an exception is desired then you would want to omit it

Building Lists in Natural Order
1. Always add elements to a list head
2. Taking the elements from the head of an inputlist and adding them head first to an output list results in having the inputlist reversed
3. Use lists:reverse/1 if you need it in the right order
ex.
my_function([H|T], Acc) ->
    my_function(T, H|Acc);
my_function([], Acc) ->
    Acc.

List ++ [H] is very inefficient and only acceptable for short lists

Using the shell
Example of defining a function
    Even = fun(X) -> (X rem 2) =:= 0 end.
Record declarations can't be used in the shell - use rr to read definitions into the shell ex. rr("records.hrl").

Records are tuples in disguise- same storage and preformance
Records allow us to associate names with elements of tuples but you only have a fixed number of elements with non-changing names
Use them if storage is an issue and you can represent your data using a fixed number of atoms
Record declaration ex.
    -record(Name, {
                    key1 = Default1, %keys must be atoms, defaults will be taken if nothing is assigned when created
                    key2 = Default2,
                    key3, %This is like key3 = undefined
                    ...
                  })
Record definitions can be stored in erlang source code files (.erl) or put in files with the extension .hrl which you include in .erl files
    This is similar to .h files in C. It is the only wya to ensure that several Erlang modules use the same record definitions
Somerecord = #recordname{key1=Val1, key2=Val2,...}. %Create new record
NewRecord = Somerecord#recordname{keyN = ValN}. %Copy Somerecord into NewRecord and change keyN val
Extract values - NewRecord#recordname.keyN. %would get the values from that key

Maps - more flexible than records but slower
Can add new names dynamically
Used to represent key-value data structures
Good to use with JSON
Elements are ordered by the keys
Updating a map where the keys are not changed is a space-efficient operation
Looking up the value of a key in a map is an efficient operation
Key-Value serperator is either => or :=
Create new map
#{Key1 Op Val1, Key2 Op Val2, ...., KeyN Op ValN}
Update map based on existing map
NewMap = OldMap#{K1 Op Val1,...}
K=>V is used to update the value of an existing key K with a new value V or to add a completely new K-V pair to the map. It always succeeds
K:=V is used to update the value of an existing key with a new value V. This fails if the map being updated does not contain the new key K
The best way to use them is to use K=>V the first time a key is defined and use Key:=Val each time the value of a specific key is changed
List of BIFs for maps - Page 82,83

try...catch
ex.
    try FuncOfExpressionSeq of
        Pattern1 [when Guard1] -> Expressions1;
        Pattern2 [when Guard2] -> Expressions2;
        ...
    catch
        ExceptionType1: ExPattern1 [when ExGuard1] -> ExExpressions1;
        ExceptionType2: ExPattern2 [when ExGuard2] -> ExExpressions2;
        ...
    after
        AfterExpressions
    end
ExceptionType is an atom (throw, exit, or error) that tells us how the exception was generated - default is throw if none are specified
After is to clean up anything done by FuncOfExpressionSeq
The after section is not required
Ex. catch every possible exception
    try Expr
    catch
        _:_ -> ...  %matches anything
    end
When reading stacktraces the form is {Module, Function, Arity, Info}

Binaries
A binary is a data structre designed for storing large quantities of raw data in a space-efficient manner
Should be used whenever possible for storing the contents of large quantites of unstrcutred data, 
for example large strings or the contents of files
The number of bits in a binary will be exactly divisible by 8 in mose cases. The in cases where it isn't it is
referred to as a bitstring
Binaries are written as a sequence of integers or strings eclosed in double less-than and greather than brackets <<data>>
term_to_binary(Term) and binary_to_term(binary) are very useful for packing and unpacking complex data structures to
be stored in files or sent over networks
Page 102 for bit syntax - Seems very useful
<<E1,E2,..,EN>>
Ei = Value |
     Value:Size |
     Value/TypeSpecifierList |
     Value:Size/TypeSpecifierList
We can write binaries to a file or socket but CAN'T write a bitstring to a file or socket since files and sockets work in bytes

Macros
-define(Constant, Replacement).
-define(Func(Var1, Var2, ..., VarN), Replacement).
Macros are expanded by the Erlang proprocessor when an expression of the form ?MacroName is encountered
ex.
    -define(macro1(X, Y), {a, X, Y).

    foo(A) ->
        ?macro1(A+10, b).
    expands into
    foo(A) ->
        {a, A+10, b}.


Numbers
Base K Integers
    K#Didgits to represent digit in other base ex. 16#af6bfa23, 2#00101010
$ syntax
represent integer code from ASCII ex. $a which is 97

Short circuit booleans
    Expr orelse Expor2
    First evaluated Expr1. If Expr1 evaluated to 2 then Expr 2 is not evaluated.
    If Expr1 evaluates to false then Expr2 is evaluated
    Expr andalso Expr2
    First evaluates Expr1. If Expr1 is true then Expr2 is evaluated. If Expr1 is
    evaluated to false then Expr2 is not evaluated

Types
defined as 
    T1 :: A | B | C ...

Tools to analayze your programs
Dialyzer
Typer

Manipulate code path
-spec code:add_patha(Dir) => true |｛error, bad_directory}
    Add a new directory, Dir, to the start of the load path
-spec code:add_pathz(Dir) => true |｛error, bad_directory}
    Add a new directory, Dir, to the end of the load path
Usual convention is to put these commands in a file called .erlang in your home directory
Your .erlang file is first read and all the commands are evaluated when you start the shell
To figure out where erlang thinks your home is(might not be where your home normall is) do
init:get_argument(home).

Compile and run from the command prompt
erlc hello.erl
erl -noshell -s hello start -s init stop
hello is the module name and start is the function name
If you wanted to take commandline arguments then you could do
erlc fac1.erl %would take in a number and compute the factorial
erl -noshell -s fac1 main 25 %taking the argument 25 to the function main
You can also use escripts
Makefiles

Reading the crashdump
Web based crash analyzer
crashdump_viewer:start().
and it will be at localhost:8888

Access the man pages for a module
erl -man module
